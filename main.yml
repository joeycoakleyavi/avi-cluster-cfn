AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template to Create an Avi Cluster
Parameters:
  InstanceType:
    Description: Avi Controller instance type
    Type: String
    Default: m5.2xlarge
    AllowedValues:
      - m5.4xlarge
      - m5.2xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  AviVantageVersion:
    Description: Provide the Version of Avi you would like to install
    Type: String
    AllowedValues:
      - Latest 21.x
      - Latest 20.x
      - Latest 18.x
      - 21.1.1
      - 21.1.2
      - 20.1.1
      - 20.1.2
      - 20.1.3
      - 20.1.4
      - 20.1.5
      - 20.1.6
      - 20.1.7
      - 18.2.13
    ConstraintDescription: Must be a valid Avi Vantage version
  VpcId:
    Description: The VPC in which the controller cluster will be deployed
    Type: 'AWS::EC2::VPC::Id'
  SubnetCtl1:
    Description: Which subnet the first controller node will be deployed into.
    Type: 'AWS::EC2::Subnet::Id'
  SubnetCtl2:
    Description: Which subnet the second controller node will be deployed into.
    Type: 'AWS::EC2::Subnet::Id'
  SubnetCtl3:
    Description: Which subnet the third controller node will be deployed into.
    Type: 'AWS::EC2::Subnet::Id'
  AviPassword:
    Description: Password for the Avi Controller
    Type: String
    Default: Avi123!@#
    NoEcho: True
  CreateVMImportExport:
    Description: Should this template create the VMImport Role? Select True if this is the first Avi AWS deployment.
    Type: String
    Default: "True"
    AllowedValues:
      - "True"
      - "False"

Mappings: 
  RegionMap:
    us-east-1:
      "layer": 668099181075
    us-east-2:
      "layer": 259788987135
    us-west-1:
      "layer": 325793726646
    us-west-2:
      "layer": 420165488524
    eu-central-1:
      "layer": 292169987271
    eu-west-1:
      "layer": 399891621064
    eu-west-2:
      "layer": 142628438157
    eu-west-3:
      "layer": 959311844005
    ap-northeast-1:
      "layer": 249908578461
    ap-southeast-1:
      "layer": 468957933125
    ap-southeast-2:
      "layer": 817496625479


Conditions:
  CreateVMImportRole: !Equals
    - !Ref CreateVMImportExport
    - "True"


Resources: 
  AviControllerLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub AviControllerLT-${AWS::StackName}
      LaunchTemplateData: 
        IamInstanceProfile: 
          Arn: !GetAtt AviControllerInstanceProfile.Arn
        ImageId: !GetAtt AMIInfo.Ami
        InstanceType: !Ref InstanceType

        UserData:
          'Fn::Base64':
            'Fn::Sub': |
                {
                "SystemConfiguration":[
                  {
                    "url":"/api/systemconfiguration",
                    "uuid":"default",
                    "email_configuration":{
                      "from_email":"admin@avicontroller.net",
                      "mail_server_port":25,
                      "smtp_type":"SMTP_NONE",
                      "mail_server_name":"localhost"
                    },
                    "global_tenant_config":{
                      "se_in_provider_context":true,
                      "tenant_access_to_provider_se":true,
                      "tenant_vrf":false
                    },
                    "dns_configuration":{
                      "search_domain":"",
                      "server_list":[
                        {
                          "type":"V4",
                          "addr":"8.8.8.8"
                        }
                      ]
                    },
                    "tech_support_uploader_configuration":{
                      "auto_upload":false
                    },
                    "docker_mode":false,
                    "welcome_workflow_complete": true, 
                    "portal_configuration":{
                      "redirect_to_https":true,
                      "enable_https":true,
                      "enable_http":true
                    },
                    "ntp_configuration":{
                      "ntp_server_list":[
                        {
                          "type":"DNS",
                          "addr":"0.us.pool.ntp.org"
                        }
                      ]
                    }
                  }
                ],
                "META":{
                  "upgrade_mode":true,
                  "version":{
                      "Version":"${AMIInfo.Version}"
                  }
                },
                "InitialConfiguration":[
                  {
                    "user_initial_setup":false,
                    "setup_failed": false
                  }
                ],
                "Tenant":[
                  {
                    "uuid":"admin",
                    "name":"admin"
                  }
                ],
                "User": [
                  {
                      "username": "admin",
                      "user_profile_ref": "/api/useraccountprofile/?name=Default-User-Account-Profile",
                      "name": "admin",
                      "is_active": true,
                      "access": [
                          {
                              "all_tenants": false,
                              "tenant_ref": "/api/tenant/?name=admin",
                              "role_ref": "/api/role/?tenant=admin&name=System-Admin"
                          }
                      ],
                      "is_superuser": true,
                      "full_name": "System Administrator",
                      "uid": 2000,
                      "password": "${AviPassword}",
                      "local": true,
                      "email": "",
                      "default_tenant_ref": "/api/tenant/?name=admin"
                  }
                ]
                }

  AviController1:
    Type: 'AWS::EC2::Instance'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref AviControllerLT
        Version: "1"
      NetworkInterfaces:
        - GroupSet:
            - !GetAtt ControllerSecurityGroup.GroupId
          AssociatePublicIpAddress: true
          DeviceIndex: "0"
          DeleteOnTermination: true
          SubnetId: !Ref SubnetCtl1
      Tags:
        - Key: Name
          Value: AviController1

  AviController2:
    Type: 'AWS::EC2::Instance'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref AviControllerLT
        Version: "1"
      NetworkInterfaces:
        - GroupSet:
            - !GetAtt ControllerSecurityGroup.GroupId
          AssociatePublicIpAddress: true
          DeviceIndex: "0"
          DeleteOnTermination: true
          SubnetId: !Ref SubnetCtl2
      Tags:
        - Key: Name
          Value: AviController2

  AviController3:
    Type: 'AWS::EC2::Instance'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref AviControllerLT
        Version: "1"
      NetworkInterfaces:
        - GroupSet:
            - !GetAtt ControllerSecurityGroup.GroupId
          AssociatePublicIpAddress: true
          DeviceIndex: "0"
          DeleteOnTermination: true
          SubnetId: !Ref SubnetCtl3
      Tags:
        - Key: Name
          Value: AviController3

  AviControllerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com

  VMimportRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateVMImportRole
    Properties:
      RoleName: vmimport
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: vmie.amazonaws.com
          Action: sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId: vmimport

  VMimportPolicy:
    Type: 'AWS::IAM::Policy'
    Condition: CreateVMImportRole
    Properties:
      PolicyName: VmimportPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:ListBucket
          - s3:GetBucketLocation
          Resource: "*"
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2:ModifySnapshotAttribute
          - ec2:CopySnapshot
          - ec2:RegisterImage
          - ec2:Describe*
          Resource: "*"
      Roles:
        - !Ref VMimportRole

  AviControllerEC2Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerEC2Policy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:DeleteSecurityGroup
              - ec2:DeleteTags
              - ec2:RebootInstances
              - ec2:RevokeSecurityGroupIngress
              - ec2:StartInstances
              - ec2:StopInstances
              - ec2:TerminateInstances
              - ec2:RevokeSecurityGroupEgress
            Resource: "*"
            Condition:
              StringLike: 
                ec2:ResourceTag/AVICLOUD_UUID: "*"
          - Sid: Stmt2
            Effect: Allow
            Action:
              - ec2:DeleteSnapshot
              - ec2:ModifySnapshotAttribute
            Resource: "*"
            Condition:
              StringLike:
                ec2:ResourceTag/AVICLOUD_UUID: "*"
          - Sid: Stmt3
            Effect: Allow
            Action:
              - 'ec2:AllocateAddress'
              - 'ec2:AssignPrivateIpAddresses'
              - 'ec2:AssociateAddress'
              - 'ec2:AttachNetworkInterface'
              - 'ec2:AttachVolume'
              - 'ec2:AuthorizeSecurityGroupEgress'
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'ec2:CancelConversionTask'
              - 'ec2:CancelImportTask'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateSecurityGroup'
              - 'ec2:CreateSnapshot'
              - 'ec2:CreateTags'
              - 'ec2:CreateVolume'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteSecurityGroup'
              - 'ec2:DeleteSnapshot'
              - 'ec2:DeleteTags'
              - 'ec2:DeleteVolume'
              - 'ec2:DeregisterImage'
              - 'ec2:DescribeAddresses'
              - 'ec2:DescribeAvailabilityZones'
              - 'ec2:DescribeConversionTasks'
              - 'ec2:DescribeImageAttribute'
              - 'ec2:DescribeImages'
              - 'ec2:DescribeImportSnapshotTasks'
              - 'ec2:DescribeInstanceAttribute'
              - 'ec2:DescribeInstanceStatus'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeInternetGateways'
              - 'ec2:DescribeNetworkAcls'
              - 'ec2:DescribeNetworkInterfaceAttribute'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DescribeRegions'
              - 'ec2:DescribeRouteTables'
              - 'ec2:DescribeSecurityGroups'
              - 'ec2:DescribeSnapshotAttribute'
              - 'ec2:DescribeSnapshots'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeTags'
              - 'ec2:DescribeVolumeAttribute'
              - 'ec2:DescribeVolumeStatus'
              - 'ec2:DescribeVolumes'
              - 'ec2:DescribeVpcAttribute'
              - 'ec2:DescribeVpcs'
              - 'ec2:DetachNetworkInterface'
              - 'ec2:DetachVolume'
              - 'ec2:DisassociateAddress'
              - 'ec2:GetConsoleOutput'
              - 'ec2:ImportSnapshot'
              - 'ec2:ImportVolume'
              - 'ec2:ModifyImageAttribute'
              - 'ec2:ModifyInstanceAttribute'
              - 'ec2:ModifyNetworkInterfaceAttribute'
              - 'ec2:ModifySnapshotAttribute'
              - 'ec2:ModifyVolumeAttribute'
              - 'ec2:RebootInstances'
              - 'ec2:RegisterImage'
              - 'ec2:ReleaseAddress'
              - 'ec2:ResetImageAttribute'
              - 'ec2:ResetInstanceAttribute'
              - 'ec2:ResetNetworkInterfaceAttribute'
              - 'ec2:ResetSnapshotAttribute'
              - 'ec2:RevokeSecurityGroupEgress'
              - 'ec2:RevokeSecurityGroupIngress'
              - 'ec2:RunInstances'
              - 'ec2:StartInstances'
              - 'ec2:StopInstances'
              - 'ec2:TerminateInstances'
              - 'ec2:UnassignPrivateIpAddresses'
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: '*'
      Roles:
        - !Ref AviControllerRole

  AviControllerASGPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerASGPolicy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribeLaunchConfigurations
            Resource: "*"
      Roles:
        - !Ref AviControllerRole

  AviControllerIAMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerIAMPolicy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - iam:GetPolicy
              - iam:GetPolicyVersion
              - iam:ListPolicyVersions
            Resource:
              - !GetAtt AviControllerRole.Arn
              - arn:aws:iam::*:policy/AviController*
          - Sid: Stmt2
            Effect: Allow
            Action:
              - iam:GetInstanceProfile
              - iam:GetRole
              - iam:GetRolePolicy
              - iam:ListAttachedRolePolicies
              - iam:ListRolePolicies
            Resource:
              - !GetAtt AviControllerInstanceProfile.Arn
              - arn:aws:iam::*:policy/AviController*
              - arn:aws:iam::*:role/vmimport
              - !GetAtt AviControllerRole.Arn
          - Sid: Stmt3
            Effect: Allow
            Action:
              - iam:ListPolicies
              - iam:ListRoles
            Resource: "*"
      Roles:
        - !Ref AviControllerRole

  AviControllerKMSPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerKMSPolicy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
              - kms:ReEncryptFrom
              - kms:ReEncryptTo
            Resource: "arn:aws:kms:*:*:key/*"
          - Sid: Stmt2
            Effect: Allow
            Action:
              - kms:ListAliases
              - kms:ListKeys
            Resource: "*"
      Roles:
        - !Ref AviControllerRole

  AviControllerR53Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerR53Policy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - route53:ChangeResourceRecordSets
              - route53:ListResourceRecordSets
            Resource: "arn:aws:route53:::hostedzone/*"
          - Sid: Stmt2
            Effect: Allow
            Action:
              - route53:GetChange
              - route53:GetHostedZone
              - route53:GetHostedZoneCount
              - route53:ListHostedZones
              - route53:ListHostedZonesByName
            Resource: "*"
      Roles:
        - !Ref AviControllerRole

  AviControllerS3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerS3Policy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - s3:ListAllMyBuckets
            Resource: "*"
          - Sid: Stmt2
            Effect: Allow
            Action:
              - s3:CreateBucket
              - s3:DeleteBucket
              - s3:GetBucketLocation
              - s3:GetBucketTagging
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutBucketTagging
            Resource: "arn:aws:s3:::avi-se-*"
          - Sid: Stmt3
            Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:DeleteObject
              - s3:ListMultipartUploadParts
              - s3:GetObject
              - s3:PutObject
            Resource: "arn:aws:s3:::avi-se-*/*"
      Roles:
        - !Ref AviControllerRole

  AviControllerSQSSNSPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerSQSSNSPolicy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - autoscaling:DeleteNotificationConfiguration
              - autoscaling:DescribeNotificationConfigurations
              - autoscaling:PutNotificationConfiguration
              - autoscaling:UpdateAutoScalingGroup
            Resource: "*"
          - Sid: Stmt2
            Effect: Allow
            Action:
              - sqs:AddPermission
              - sqs:CreateQueue
              - sqs:DeleteQueue
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ListQueueTags
              - sqs:PurgeQueue
              - sqs:ReceiveMessage
              - sqs:SetQueueAttributes
              - sqs:TagQueue
              - sqs:UntagQueue
            Resource: "arn:aws:sqs:*:*:avi-sqs-cloud-*"
          - Sid: Stmt3
            Effect: Allow
            Action:
              - sns:Subscribe
            Resource: "arn:aws:sns:*:*:avi-asg-cloud-*"
          - Sid: Stmt4
            Effect: Allow
            Action:
              - sns:ListTopics
              - sns:GetSubscriptionAttributes
              - sns:Unsubscribe
            Resource: "*"
          - Sid: Stmt5
            Effect: Allow
            Action:
              - sns:ConfirmSubscription
              - sns:CreateTopic
              - sns:DeleteTopic
              - sns:GetTopicAttributes
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:SetTopicAttributes
            Resource: "arn:aws:sns:*:*:avi-asg-cloud-*"
      Roles:
        - !Ref AviControllerRole

  AviControllerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref AviControllerRole

  LambdaExecutionPolicyCallStateMachine:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: states
            Effect: Allow
            Action: [
              'states:StartExecution',
              'states:DescribeExecution'
            ]
            Resource: '*'
          - Sid: log
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  LambdaExecutionRoleCallStateMachine:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns: [
        !Ref LambdaExecutionPolicyCallStateMachine
      ]
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Path: /

  LambdaExecutionRoleConfigureCluster:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns: [
        arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      ]
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Path: /
      Policies:
        - PolicyName: VPCConfig
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - ec2:Describe*
                  - ec2:Get*
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  LambdaCallStateMachine:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.lambda_handler
      FunctionName: !Sub CallStateMachine-${AWS::StackName}
      Environment:
        Variables:
          statemachineARN : !GetAtt StateMachine.Arn
      Role: !Sub ${LambdaExecutionRoleCallStateMachine.Arn}
      Code:
        ZipFile: |
          from botocore.exceptions import ClientError
          import boto3
          import cfnresponse
          import os
          import json
          statemachineARN = os.getenv('statemachineARN')
          def lambda_handler(event, context):
              print("Received Event:")
              print(event)
              print(statemachineARN)
              sfn_client = boto3.client('stepfunctions')
              try:
                  if event['RequestType'] == 'Delete':
                      print("Delete Event Requested")
                      return(cfnresponse.send(event, context, cfnresponse.SUCCESS, {}))     
                  response = sfn_client.start_execution(stateMachineArn=statemachineARN,input=(json.dumps(event)))
                  sfn_arn = response.get('executionArn')
                  print(sfn_arn)
              except Exception:
                  print('Could not run the Step Function')
                  responseData = {}
                  responseData['Error'] = "CouldNotCallStateMachine"
                  response=cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                  return(response)
              return(sfn_arn)
      Runtime: "python3.6"
      Timeout: 25
    
  NotifyCFN:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.lambda_handler
      FunctionName: !Sub NotifyCFN-${AWS::StackName}
      Role: !Sub ${LambdaExecutionRoleCallStateMachine.Arn}
      Code:
        ZipFile: |
          from botocore.exceptions import ClientError
          import boto3
          import cfnresponse
          import json
          def lambda_handler(event, context):
              print("Received Event:")
              print(event)
              try:
                  if event.get('error'):
                      cfnresponse.send(event, context, cfnresponse.FAILED, {})
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Runtime: "python3.6"
      Timeout: 25

  StateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString: !Sub
        |-
          {
              "Comment": "Configure Cluster",
              "StartAt": "ConfigureCluster",
              "States": {
                  "ConfigureCluster": {
                      "Type": "Task",
                      "Resource": "${ConfigureClusterLambda.Arn}",
                      "Retry": [
                          {
                              "ErrorEquals": ["States.ALL"],
                              "IntervalSeconds": 120,
                              "MaxAttempts": 8,
                              "BackoffRate": 1
                          }
                      ],
                      "Catch": [
                          {
                              "ErrorEquals": ["States.ALL"],
                              "ResultPath": "$.error",
                              "Next": "NotifyCFN"
                          }
                      ],
                      "Next": "NotifyCFN"
                  },
                  "NotifyCFN": {
                      "Type": "Task",
                      "Resource": "${NotifyCFN.Arn}",
                      "End": true
                  }
              }
          }
      RoleArn: !GetAtt StateMachineRole.Arn

  ConfigureClusterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Configures Avi Controller Cluster
      FunctionName: !Sub ConfigureCluster-${AWS::StackName}
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRoleConfigureCluster.Arn
      Runtime: python3.6
      Layers: 
        - !Sub
          - arn:aws:lambda:${AWS::Region}:${Layer}:layer:AWSLambda-Python-AWS-SDK:4
          - { 'Layer': !FindInMap ["RegionMap", !Ref AWS::Region, "layer"] }
      Timeout: 30
      Code:
        ZipFile: |
          import logging
          import os
          import json
          from botocore.vendored import requests

          avi_password = os.environ.get('AVIPASSWORD', '')
          api_version = os.environ.get('APIVERSION', '20.1.4')
          headers = {
            'x-avi-version': api_version,
            'Content-Type': 'application/json'
            }
          auth = {'username': 'admin', 'password': avi_password}
    
          class NotReady(Exception):
              pass

          def ready_check(nodes:dict, password:str, api_version:str):
              result = []
              for node, ip in nodes.items():
                  base_url = 'https://{}'.format(ip['PrivateIp'])
                  try:
                      with requests.Session() as session:
                          session.post(base_url + "/login", data=auth, verify=False)
                          if session.get(base_url + "/api/cluster", verify=False).status_code == 200:
                              result.append(node)
                  except:
                      pass
              return True if len(result) == 3 else False

          def lambda_handler(event, context):
              print("Received Event:")
              print(event)
              nodes = event['ResourceProperties']['Nodes']
              base_url = 'https://{}'.format(nodes['Ctl1']['PrivateIp'])
              data = {
                  "nodes": [
                      {
                          "name": "Ctl1",
                          "ip": {
                              "addr": nodes['Ctl1']['PrivateIp'],
                              "type": "V4"
                          },
                          "password": avi_password
                      },
                      {
                          "name": "Ctl2",
                          "ip": {
                              "addr": nodes['Ctl2']['PrivateIp'],
                              "type": "V4"
                          },
                          "password": avi_password
                      },
                      {
                          "name": "Ctl3",
                          "ip": {
                              "addr": nodes['Ctl3']['PrivateIp'],
                              "type": "V4"
                          },
                          "password": avi_password
                      }
                  ]
              }

              try:
                  if ready_check(nodes, avi_password, api_version):
                      print("Ready Check: Passed!")
                      print("Beginning Cluster Configuration")
                      with requests.Session() as session:
                          session.post(base_url + '/login', data=auth, verify=False)
                          cookie_dict = requests.utils.dict_from_cookiejar(session.cookies)
                          headers.update({"Referer": base_url, "x-csrftoken": cookie_dict['csrftoken']})
                          session.headers.update(headers)
                          resp = session.put(base_url + '/api/cluster', data=json.dumps(data), verify=False, headers=session.headers)
                          if resp.status_code == 200:
                              return(event)
                          else:
                              raise NotReady
                  else:
                      print("Ready Check Failed. Raising NotReady Exception")
                      raise NotReady
              except Exception:
                  print("Caught an exception")
                  raise NotReady        
      Environment:
        Variables:
          AVIPASSWORD: !Ref AviPassword
          APIVERSION: !GetAtt AMIInfo.Version
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt ConfigureClusterLambdaSG.GroupId
        SubnetIds:
          - !Ref SubnetCtl1

  StateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  CallStateMachineCustom:
    Type: 'Custom::CustomResource'
    Properties:
      ServiceToken: !GetAtt LambdaCallStateMachine.Arn
      Nodes:
        Ctl1:
          PrivateIp: !GetAtt AviController1.PrivateIp
        Ctl2:
          PrivateIp: !GetAtt AviController2.PrivateIp
        Ctl3:
          PrivateIp: !GetAtt AviController3.PrivateIp

  ControllerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp: 0.0.0.0/0

  ConfigureClusterLambdaSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Outbound access to configure Avi Cluster from within the VPC
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  LambdaExecutionPolicyAmiLookup:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ec2
            Effect: Allow
            Action: [
              'ec2:DescribeImages',
              'ec2:RunInstances'
            ]
            Resource: '*'
          - Sid: log
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  LambdaExecutionRoleAmiLookup:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns: [
        !Ref LambdaExecutionPolicyAmiLookup
      ]
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Path: /

  LambdaAMILookup:
    Type: AWS::Lambda::Function
    Properties:
      Description: AMI Lookup Lambda Function
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRoleAmiLookup.Arn
      Runtime: python3.6
      Timeout: 5
      Code:
        ZipFile: |
          #!/usr/bin/python
          import boto3
          import botocore.exceptions
          import re
          import cfnresponse

          ec2 = boto3.client('ec2')

          class AmiNotFound(Exception):
              pass
          class OptInRequired(Exception):
              pass

          def get_avi_version(ami):
              '''
              Pulls Avi Version out of an AMI Description
              '''
              regex = re.compile('\d+\.\d+\.\d+', re.IGNORECASE)
              m = regex.search(ami['Description'])
              return m.group() if m else None

          def get_latest_ami_by_major_version(major_version, image_list):
              '''
              Get the latest version of a major release. I.E. if 20.x is specified and 20.1.1 - 20.1.6
              are available, choose 20.1.6

              Acceptable values as of 12/2021: Latest 18.x, Latest 20.x, Latest 21.x
              '''

              major_version_num = major_version.split(' ')[1].split('.')[0]
              result = { 'Ami': '', 'Version': ''}

              for image in image_list:
                  version = get_avi_version(image)
                  if version and version.startswith(major_version_num):
                      if not result['Ami']:
                          result['Ami'] = image['ImageId']
                          result['Version'] = version
                      elif version > result['Version']:
                          result['Ami'] = image['ImageId']
                          result['Version'] = version
                      else:
                          pass

              if not result['Ami']:
                  raise AmiNotFound("No AMI could be found with the specified parameters")

              return result

          def get_ami_by_version_number(version_number, image_list):
              result = { 'Ami': '', 'Version': '' }
              for image in image_list:
                  version = get_avi_version(image)
                  if version and version_number in version:
                      result['Ami'] = image['ImageId']
                      result['Version'] = version_number
                      return result
              raise AmiNotFound("No AMI could be found with the specified parameters")

          def test_ami_permissions(ami, event, context):
              try:
                  response = ec2.run_instances(
                      ImageId=ami,
                      InstanceType='m5.2xlarge',
                      DryRun=True,
                      MaxCount=1,
                      MinCount=1
                  )
              except botocore.exceptions.ClientError as e:
                  if e.response['Error'].get('Code') == 'DryRunOperation':
                      pass
                  elif e.response['Error'].get('Code') == 'OptInRequired':
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': 'Product is not subscribed to in the AWS Marketplace.'})
                  else:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': 'Unknown exception when testing AMI permissions'})

          response = ec2.describe_images(
              Filters=[
                  {
                      "Name": "product-code",
                      "Values": [
                          "a9e7i60gidrc5x9nd7z3qyjj5"
                      ]
                  },
                  {
                      "Name": "state",
                      "Values": [
                          "available"
                          ]
                  }
              ]
          )
          images = response['Images']

          def lambda_handler(event, context):
              requested_image_version = event['ResourceProperties']['VersionRequested']
              responseData = {}

              try:
                  if event['RequestType'] == 'Delete':
                      print('Delete Event Requested')
                      return(cfnresponse.send(event, context, cfnresponse.SUCCESS, {}))

                  if "Latest" in requested_image_version:
                      responseData = get_latest_ami_by_major_version(requested_image_version, images)
                  else:
                      responseData = get_ami_by_version_number(requested_image_version, images)
                  
              except Exception:
                  responseData = {}
                  responseData['Error'] = 'Execution error when performing AMI lookup. Please check logs'
                  response = cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                            
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken: !GetAtt LambdaAMILookup.Arn
      VersionRequested: !Ref AviVantageVersion
  

Outputs:
  CTL1PrivateIP:
    Description: Private IP of the Controller
    Value: !GetAtt AviController1.PrivateIp
  CTL2PrivateIP:
    Description: Private IP of the Controller
    Value: !GetAtt AviController2.PrivateIp
  CTL3PrivateIP:
    Description: Private IP of the Controller
    Value: !GetAtt AviController3.PrivateIp
  CTL1PublicIP:
    Description: Public IP of the Controller
    Value: !GetAtt AviController1.PublicIp
  CTL2PublicIP:
    Description: Public IP of the Controller
    Value: !GetAtt AviController2.PublicIp
  CTL3PublicIP:
    Description: Public IP of the Controller
    Value: !GetAtt AviController3.PublicIp
  AMI:
    Description: AMI Returned from Lambda
    Value: !GetAtt AMIInfo.Ami
  AviVersion:
    Description: Avi Version Returned from Lambda
    Value: !GetAtt AMIInfo.Version