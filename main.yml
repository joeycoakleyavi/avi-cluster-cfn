AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template to Create an Avi Cluster
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: Avi Controller instance type
    Type: String
    Default: m5.2xlarge
    AllowedValues:
      - m5.4xlarge
      - m5.2xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  AviVantageVersion:
    Description: The version of Avi Vantage
    Type: String
    Default: 20.1.4
    AllowedValues:
      - 20.1.4
    ConstraintDescription: Must be a valid Avi Vantage version
  VpcId:
    Description: The VPC in which the controller cluster will be deployed
    Type: 'AWS::EC2::VPC::Id'
  SubnetId:
    Description: Which subnet the controller cluster will be deployed to.
    Type: 'AWS::EC2::Subnet::Id'
  AviPassword:
    Description: Password for the Avi Controller
    Type: String
    Default: Avi123!@#
    NoEcho: True
  S3BucketName:
    Description: Name of the S3 bucket which contains deployment code
    Type: String
    Default: jcoakley-bucket
  S3Key:
    Description: Name of the zipfile in the S3 bucket
    Type: String
    Default: deploy.zip
  LatestWindowsImage:
    Description: Windows AMI used for bastion host.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base'
  AllowedRDPAccess:
    Description: CIDR that is authorized to RDP into Bastion
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|1[0-9]|2[0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/0-32.
  CreateVMImportExport:
    Description: Should this template create the VMImport Role? Select True if this is the first Avi AWS deployment.
    Type: String
    Default: "True"
    AllowedValues:
      - "True"
      - "False"

Mappings: 
  RegionMap:
    us-east-1:
      "2014": ami-0822ac66b62a893cc
    us-east-2:
      "2014": ami-08cf08a0ba5dcff76
    us-west-1:
      "2014": ami-0fa6c926c2fb340d3
    us-west-2:
      "2014": ami-08ecc90c68f430fc2
    eu-central-1:
      "2014": ami-030f68f6e94f00a30
    eu-west-1:
      "2014": ami-05d415fa077f74349
    eu-west-2:
      "2014": ami-09ec1ddcb679307c3
    eu-west-3:
      "2014": ami-041406d054148f645
    ap-northeast-1:
      "2014": ami-0c91bac459416082e
    ap-southeast-1:
      "2014": ami-03d56278f53a1db5c

  VersionMap:
    20.1.4:
      version: '2014'

Conditions:
  CreateVMImportRole: !Equals
    - !Ref CreateVMImportExport
    - "True"


Resources: 
  AviControllerLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub AviControllerLT-${AWS::StackName}
      LaunchTemplateData: 
        IamInstanceProfile: 
          Arn: !GetAtt AviControllerInstanceProfile.Arn
        ImageId: !FindInMap
          - RegionMap
          - !Ref 'AWS::Region'
          - !FindInMap
            - VersionMap
            - !Ref AviVantageVersion
            - version
        KeyName: !Ref KeyName
        InstanceType: !Ref InstanceType
        NetworkInterfaces:
          - Groups:
              - !Ref ControllerSecurityGroup
            AssociatePublicIpAddress: false
            DeviceIndex: 0
            DeleteOnTermination: true
            SubnetId: !Ref SubnetId
        UserData:
          'Fn::Base64':
            'Fn::Sub': |
                {
                "SystemConfiguration":[
                  {
                    "url":"/api/systemconfiguration",
                    "uuid":"default",
                    "email_configuration":{
                      "from_email":"admin@avicontroller.net",
                      "mail_server_port":25,
                      "smtp_type":"SMTP_NONE",
                      "mail_server_name":"localhost"
                    },
                    "global_tenant_config":{
                      "se_in_provider_context":true,
                      "tenant_access_to_provider_se":true,
                      "tenant_vrf":false
                    },
                    "dns_configuration":{
                      "search_domain":"",
                      "server_list":[
                        {
                          "type":"V4",
                          "addr":"8.8.8.8"
                        }
                      ]
                    },
                    "tech_support_uploader_configuration":{
                      "auto_upload":false
                    },
                    "docker_mode":false,
                    "welcome_workflow_complete": true, 
                    "portal_configuration":{
                      "redirect_to_https":true,
                      "enable_https":true,
                      "enable_http":true
                    },
                    "ntp_configuration":{
                      "ntp_server_list":[
                        {
                          "type":"DNS",
                          "addr":"0.us.pool.ntp.org"
                        }
                      ]
                    }
                  }
                ],
                "META":{
                  "upgrade_mode":true,
                  "version":{
                      "Version":"${AviVantageVersion}"
                  }
                },
                "InitialConfiguration":[
                  {
                    "user_initial_setup":false,
                    "setup_failed": false
                  }
                ],
                "Tenant":[
                  {
                    "uuid":"admin",
                    "name":"admin"
                  }
                ],
                "User": [
                  {
                      "username": "admin",
                      "user_profile_ref": "/api/useraccountprofile/?name=Default-User-Account-Profile",
                      "name": "admin",
                      "is_active": true,
                      "access": [
                          {
                              "all_tenants": false,
                              "tenant_ref": "/api/tenant/?name=admin",
                              "role_ref": "/api/role/?tenant=admin&name=System-Admin"
                          }
                      ],
                      "is_superuser": true,
                      "full_name": "System Administrator",
                      "uid": 2000,
                      "password": "${AviPassword}",
                      "local": true,
                      "email": "",
                      "default_tenant_ref": "/api/tenant/?name=admin"
                  }
                ]
                }

  AviController1:
    Type: 'AWS::EC2::Instance'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref AviControllerLT
        Version: "1"
      Tags:
        - Key: Name
          Value: AviController1

  AviController2:
    Type: 'AWS::EC2::Instance'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref AviControllerLT
        Version: "1"
      Tags:
        - Key: Name
          Value: AviController2

  AviController3:
    Type: 'AWS::EC2::Instance'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref AviControllerLT
        Version: "1"
      Tags:
        - Key: Name
          Value: AviController3

  AviControllerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com

  VMimportRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateVMImportRole
    Properties:
      RoleName: vmimport
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: vmie.amazonaws.com
          Action: sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId: vmimport

  VMimportPolicy:
    Type: 'AWS::IAM::Policy'
    Condition: CreateVMImportRole
    Properties:
      PolicyName: VmimportPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:ListBucket
          - s3:GetBucketLocation
          Resource: "*"
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2:ModifySnapshotAttribute
          - ec2:CopySnapshot
          - ec2:RegisterImage
          - ec2:Describe*
          Resource: "*"
      Roles:
        - !Ref VMimportRole

  AviControllerEC2Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerEC2Policy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:DeleteSecurityGroup
              - ec2:DeleteTags
              - ec2:RebootInstances
              - ec2:RevokeSecurityGroupIngress
              - ec2:StartInstances
              - ec2:StopInstances
              - ec2:TerminateInstances
              - ec2:RevokeSecurityGroupEgress
            Resource: "*"
            Condition:
              StringLike: 
                ec2:ResourceTag/AVICLOUD_UUID: "*"
          - Sid: Stmt2
            Effect: Allow
            Action:
              - ec2:DeleteSnapshot
              - ec2:ModifySnapshotAttribute
            Resource: "*"
            Condition:
              StringLike:
                ec2:ResourceTag/AVICLOUD_UUID: "*"
          - Sid: Stmt3
            Effect: Allow
            Action:
              - 'ec2:AllocateAddress'
              - 'ec2:AssignPrivateIpAddresses'
              - 'ec2:AssociateAddress'
              - 'ec2:AttachNetworkInterface'
              - 'ec2:AttachVolume'
              - 'ec2:AuthorizeSecurityGroupEgress'
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'ec2:CancelConversionTask'
              - 'ec2:CancelImportTask'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateSecurityGroup'
              - 'ec2:CreateSnapshot'
              - 'ec2:CreateTags'
              - 'ec2:CreateVolume'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteSecurityGroup'
              - 'ec2:DeleteSnapshot'
              - 'ec2:DeleteTags'
              - 'ec2:DeleteVolume'
              - 'ec2:DeregisterImage'
              - 'ec2:DescribeAddresses'
              - 'ec2:DescribeAvailabilityZones'
              - 'ec2:DescribeConversionTasks'
              - 'ec2:DescribeImageAttribute'
              - 'ec2:DescribeImages'
              - 'ec2:DescribeImportSnapshotTasks'
              - 'ec2:DescribeInstanceAttribute'
              - 'ec2:DescribeInstanceStatus'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeInternetGateways'
              - 'ec2:DescribeNetworkAcls'
              - 'ec2:DescribeNetworkInterfaceAttribute'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DescribeRegions'
              - 'ec2:DescribeRouteTables'
              - 'ec2:DescribeSecurityGroups'
              - 'ec2:DescribeSnapshotAttribute'
              - 'ec2:DescribeSnapshots'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeTags'
              - 'ec2:DescribeVolumeAttribute'
              - 'ec2:DescribeVolumeStatus'
              - 'ec2:DescribeVolumes'
              - 'ec2:DescribeVpcAttribute'
              - 'ec2:DescribeVpcs'
              - 'ec2:DetachNetworkInterface'
              - 'ec2:DetachVolume'
              - 'ec2:DisassociateAddress'
              - 'ec2:GetConsoleOutput'
              - 'ec2:ImportSnapshot'
              - 'ec2:ImportVolume'
              - 'ec2:ModifyImageAttribute'
              - 'ec2:ModifyInstanceAttribute'
              - 'ec2:ModifyNetworkInterfaceAttribute'
              - 'ec2:ModifySnapshotAttribute'
              - 'ec2:ModifyVolumeAttribute'
              - 'ec2:RebootInstances'
              - 'ec2:RegisterImage'
              - 'ec2:ReleaseAddress'
              - 'ec2:ResetImageAttribute'
              - 'ec2:ResetInstanceAttribute'
              - 'ec2:ResetNetworkInterfaceAttribute'
              - 'ec2:ResetSnapshotAttribute'
              - 'ec2:RevokeSecurityGroupEgress'
              - 'ec2:RevokeSecurityGroupIngress'
              - 'ec2:RunInstances'
              - 'ec2:StartInstances'
              - 'ec2:StopInstances'
              - 'ec2:TerminateInstances'
              - 'ec2:UnassignPrivateIpAddresses'
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: '*'
      Roles:
        - !Ref AviControllerRole

  AviControllerASGPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerASGPolicy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribeLaunchConfigurations
            Resource: "*"
      Roles:
        - !Ref AviControllerRole

  AviControllerIAMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerIAMPolicy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - iam:GetPolicy
              - iam:GetPolicyVersion
              - iam:ListPolicyVersions
            Resource:
              - !GetAtt AviControllerRole.Arn
              - arn:aws:iam::*:policy/AviController*
          - Sid: Stmt2
            Effect: Allow
            Action:
              - iam:GetInstanceProfile
              - iam:GetRole
              - iam:GetRolePolicy
              - iam:ListAttachedRolePolicies
              - iam:ListRolePolicies
            Resource:
              - !GetAtt AviControllerInstanceProfile.Arn
              - arn:aws:iam::*:policy/AviController*
              - arn:aws:iam::*:role/vmimport
              - !GetAtt AviControllerRole.Arn
          - Sid: Stmt3
            Effect: Allow
            Action:
              - iam:ListPolicies
              - iam:ListRoles
            Resource: "*"
      Roles:
        - !Ref AviControllerRole

  AviControllerKMSPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerKMSPolicy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
              - kms:ReEncryptFrom
              - kms:ReEncryptTo
            Resource: "arn:aws:kms:*:*:key/*"
          - Sid: Stmt2
            Effect: Allow
            Action:
              - kms:ListAliases
              - kms:ListKeys
            Resource: "*"
      Roles:
        - !Ref AviControllerRole

  AviControllerR53Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerR53Policy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - route53:ChangeResourceRecordSets
              - route53:ListResourceRecordSets
            Resource: "arn:aws:route53:::hostedzone/*"
          - Sid: Stmt2
            Effect: Allow
            Action:
              - route53:GetChange
              - route53:GetHostedZone
              - route53:GetHostedZoneCount
              - route53:ListHostedZones
              - route53:ListHostedZonesByName
            Resource: "*"
      Roles:
        - !Ref AviControllerRole

  AviControllerS3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerS3Policy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - s3:ListAllMyBuckets
            Resource: "*"
          - Sid: Stmt2
            Effect: Allow
            Action:
              - s3:CreateBucket
              - s3:DeleteBucket
              - s3:GetBucketLocation
              - s3:GetBucketTagging
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutBucketTagging
            Resource: "arn:aws:s3:::avi-se-*"
          - Sid: Stmt3
            Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:DeleteObject
              - s3:ListMultipartUploadParts
              - s3:GetObject
              - s3:PutObject
            Resource: "arn:aws:s3:::avi-se-*/*"
      Roles:
        - !Ref AviControllerRole

  AviControllerSQSSNSPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AviControllerSQSSNSPolicy
      PolicyDocument:
        Statement:
          - Sid: Stmt1
            Effect: Allow
            Action:
              - autoscaling:DeleteNotificationConfiguration
              - autoscaling:DescribeNotificationConfigurations
              - autoscaling:PutNotificationConfiguration
              - autoscaling:UpdateAutoScalingGroup
            Resource: "*"
          - Sid: Stmt2
            Effect: Allow
            Action:
              - sqs:AddPermission
              - sqs:CreateQueue
              - sqs:DeleteQueue
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ListQueueTags
              - sqs:PurgeQueue
              - sqs:ReceiveMessage
              - sqs:SetQueueAttributes
              - sqs:TagQueue
              - sqs:UntagQueue
            Resource: "arn:aws:sqs:*:*:avi-sqs-cloud-*"
          - Sid: Stmt3
            Effect: Allow
            Action:
              - sns:Subscribe
            Resource: "arn:aws:sns:*:*:avi-asg-cloud-*"
          - Sid: Stmt4
            Effect: Allow
            Action:
              - sns:ListTopics
              - sns:GetSubscriptionAttributes
              - sns:Unsubscribe
            Resource: "*"
          - Sid: Stmt5
            Effect: Allow
            Action:
              - sns:ConfirmSubscription
              - sns:CreateTopic
              - sns:DeleteTopic
              - sns:GetTopicAttributes
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:SetTopicAttributes
            Resource: "arn:aws:sns:*:*:avi-asg-cloud-*"
      Roles:
        - !Ref AviControllerRole

  AviControllerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref AviControllerRole

  LambdaExecutionPolicyCallStateMachine:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: states
            Effect: Allow
            Action: [
              'states:StartExecution',
              'states:DescribeExecution'
            ]
            Resource: '*'
          - Sid: log
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  LambdaExecutionRoleCallStateMachine:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns: [
        !Ref LambdaExecutionPolicyCallStateMachine
      ]
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Path: /

  LambdaExecutionRoleConfigureCluster:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns: [
        arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      ]
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Path: /
      Policies:
        - PolicyName: VPCConfig
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - ec2:Describe*
                  - ec2:Get*
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  LambdaCallStateMachine:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.lambda_handler
      FunctionName: !Sub CallStateMachine-${AWS::StackName}
      Environment:
        Variables:
          statemachineARN : !GetAtt StateMachine.Arn
      Role: !Sub ${LambdaExecutionRoleCallStateMachine.Arn}
      Code:
        ZipFile: |
          from botocore.exceptions import ClientError
          import boto3
          import cfnresponse
          import os
          import json
          statemachineARN = os.getenv('statemachineARN')
          def lambda_handler(event, context):
              print("Received Event:")
              print(event)
              print(statemachineARN)
              sfn_client = boto3.client('stepfunctions')
              try:
                  if event['RequestType'] == 'Delete':
                    print("Delete Event Requested")
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  response = sfn_client.start_execution(stateMachineArn=statemachineARN,input=(json.dumps(event)))
                  sfn_arn = response.get('executionArn')
                  print(sfn_arn)
              except Exception:
                  print('Could not run the Step Function')
                  responseData = {}
                  responseData['Error'] = "CouldNotCallStateMachine"
                  response=cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                  return(response)
              return(sfn_arn)
      Runtime: "python2.7"
      Timeout: 25
    
  NotifyCFN:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.lambda_handler
      FunctionName: !Sub NotifyCFN-${AWS::StackName}
      Role: !Sub ${LambdaExecutionRoleCallStateMachine.Arn}
      Code:
        ZipFile: |
          from botocore.exceptions import ClientError
          import boto3
          import cfnresponse
          import json
          def lambda_handler(event, context):
              print("Received Event:")
              print(event)
              try:
                  if event.get('error'):
                      cfnresponse.send(event, context, cfnresponse.FAILED, {})
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Runtime: "python2.7"
      Timeout: 25

  StateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString: !Sub
        |-
          {
              "Comment": "Configure Cluster",
              "StartAt": "ConfigureCluster",
              "States": {
                  "ConfigureCluster": {
                      "Type": "Task",
                      "Resource": "${ConfigureClusterLambda.Arn}",
                      "Retry": [
                          {
                              "ErrorEquals": ["States.ALL"],
                              "IntervalSeconds": 120,
                              "MaxAttempts": 8
                          }
                      ],
                      "Catch": [
                          {
                              "ErrorEquals": ["States.ALL"],
                              "ResultPath": "$.error",
                              "Next": "NotifyCFN"
                          }
                      ],
                      "Next": "NotifyCFN"
                  },
                  "NotifyCFN": {
                      "Type": "Task",
                      "Resource": "${NotifyCFN.Arn}",
                      "End": true
                  }
              }
          }
      RoleArn: !GetAtt StateMachineRole.Arn

  ConfigureClusterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Configures Avi Controller Cluster
      FunctionName: !Sub ConfigureCluster-${AWS::StackName}
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRoleConfigureCluster.Arn
      Runtime: python3.6
      Timeout: 30
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3Key
      Environment:
        Variables:
          AVIPASSWORD: !Ref AviPassword
          APIVERSION: !Ref AviVantageVersion
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt ConfigureClusterLambdaSG.GroupId
        SubnetIds:
          - !Ref SubnetId

  StateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  CallStateMachineCustom:
    Type: 'Custom::CustomResource'
    Properties:
      ServiceToken: !GetAtt LambdaCallStateMachine.Arn
      Nodes:
        Ctl1:
          PrivateIp: !GetAtt AviController1.PrivateIp
        Ctl2:
          PrivateIp: !GetAtt AviController2.PrivateIp
        Ctl3:
          PrivateIp: !GetAtt AviController3.PrivateIp

  ControllerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp: 0.0.0.0/0

  ConfigureClusterLambdaSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Outbound access to configure Avi Cluster from within the VPC
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref AllowedRDPAccess

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestWindowsImage
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - GroupSet:
            - !Ref BastionSecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: "0"
          DeleteOnTermination: true
          SubnetId: !Ref SubnetId
      UserData: 
        Fn::Base64: !Sub |
          <powershell>
          NET USER admin ${AviPassword} /ADD
          NET LOCALGROUP Administrators admin /ADD
          </powershell>

Outputs:
  CTL1PrivateIP:
    Description: Public IP of the Controller
    Value: !GetAtt AviController1.PrivateIp
  CTL2PrivateIP:
    Description: Public IP of the Controller
    Value: !GetAtt AviController2.PrivateIp
  CTL3PrivateIP:
    Description: Public IP of the Controller
    Value: !GetAtt AviController3.PrivateIp
  BastionPublicIP:
    Description: RDP Jumphost access
    Value: !GetAtt BastionHost.PublicIp
  # CTL1PublicIP:
  #   Description: Public IP of the Controller
  #   Value: !GetAtt AviController1.PublicIp
  # CTL2PublicIP:
  #   Description: Public IP of the Controller
  #   Value: !GetAtt AviController2.PublicIp
  # CTL3PublicIP:
  #   Description: Public IP of the Controller
  #   Value: !GetAtt AviController3.PublicIp